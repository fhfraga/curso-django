"""
Django settings for pypro project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import decouple
import dj_database_url
from functools import partial
import os
import whitenoise

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Construa caminhos dentro do projeto como este: BASE_DIR / 'subdir'.
# BASE_DIR é o diretório raiz do projeto
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# para gerar uma chave aleatório rodar no terminal o pipenv shell em seguida
# abrir o python e rodar
# >>> from django.core.management.utils import get_random_secret_key
# >>> get_random_secret_key() # irar gerar uma chave aleatória
# para colocar essa chave no heroku, configurar ele no terminal com o comando
# heroku config:set SECRET_KEY=<sua_chave_secreta_gerada>
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# config tenta achar o nome da configuração dentro de seus parenteses
# onde ela vai buscar esse valor? primeiramente ela vai tentar achar este valor 
# de dentro do parenteses por uma variável de ambiente com o mesmo nome, caso
# essa variável de ambiente não esteja definida, ele vai buscar em um arquivo
# chamado .env
# esse arquivo é criado para que no ambiente de produção apareça o erro, mas no
# site que está no ar não
# no terminal para configurar o heroku como false deve-se correr
# >>> $ heroku config:set DEBUG=False
DEBUG = config('DEBUG', cast=bool) # cast serve para conversão de tipos

# decouple.Csv() permite colocar valores separados por vírgula
# no terminal para configurar o heroku com os hosts
# >>> $ heroku config:set ALLOWED_HOSTS=<endereço_do_site>
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=decouple.Csv())


# Application definition

# aqui se coloca o endereço de completo para seu app
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pypro.base'
]

# comando para informar ao django a classe base utilizada como usuário
AUTH_USER_MODEL = 'base.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pypro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pypro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# se o banco de dados no heroku não for criado direto, usar o seguinte comando:
# >>> create heroku-postgresql:hobby-dev
# banco de dados padrão
default_db_url = 'sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3')

# banco de dados postgresql criado pelo heroku
parse_database = partial(dj_database_url.parse, conn_max_age=600)


DATABASES = {
    'default': config('DATABASE_URL', default=default_db_url, 
    cast=parse_database)
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# define a lingua do seu site, no caso português brasileiro
LANGUAGE_CODE = 'pt-br'

# mudando o fuso horário, que por padrão vem sem nenhum fuso horário (UTC)
TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# configuração de ambiente de desenvolvimento
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# variáveis para uploads de arquivos
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
